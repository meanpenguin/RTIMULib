////////////////////////////////////////////////////////////////////////////
//
//  This file is part of RTIMULib
//
//  Copyright (c) 2014-2015, richards-tech, LLC
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy of
//  this software and associated documentation files (the "Software"), to deal in
//  the Software without restriction, including without limitation the rights to use,
//  copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
//  Software, and to permit persons to whom the Software is furnished to do so,
//  subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in all
//  copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//  INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
//  PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
//  HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
//  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
//  SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


#include "RTIMULib.h"

#define __STDC_FORMAT_MACROS
#include <inttypes.h>

#include <termios.h>
#include <unistd.h>
#include <ctype.h>
#include <sys/wait.h>
#include <sys/ioctl.h>

char getUserChar();

static RTIMUSettings *settings;
static RTIMU         *imu;
static RTPressure    *pressure; 
static RTHumidity    *humidity;
static RTMotion      *motion;


int main()
{
    int sampleCount = 0;
    int sampleRate = 0;
    int timeout;
    uint64_t rateTimer;
    uint64_t now;
    uint64_t lastPoll;
    uint64_t lastIMUPoll;
    uint64_t lastPressurePoll;
    uint64_t lastHumidityPoll;
    uint64_t lastDisplayPoll;
    
    bool ismoving = false;
    bool enableCompass = true;
    char keystatus[26] = " ------M-G->----------- \n";
    char sysstatus1[64] = " -------------------------------------------- \n";
    char sysstatus2[64] = " -------------------------------------------- \n";
    
    RTVector3 residuals;
    RTFLOAT heading;
    float heading_avg = 0.0f;
    float humidity_avg = 0.0f;
    char input;
    bool mustExit = false;
    RTIMU_DATA imuData;
            
    //  using RTIMULib here allows it to use the .ini file generated by RTIMULibDemo.

    settings = new RTIMUSettings("RTIMULib");

    imu      = RTIMU::createIMU(settings);
    if ((imu == NULL) || (imu->IMUType() == RTIMU_TYPE_NULL)) {
        printf("No IMU found\n");
        exit(1);
    }

    pressure = RTPressure::createPressure(settings);
    humidity = RTHumidity::createHumidity(settings);
    
    motion = new  RTMotion(settings);
    motion->motionInit();
    
    RTFLOAT staticPressure = 1013.25f;

    //  This is an opportunity to manually override any settings before the call IMUInit

    //  set up IMU
    imu->IMUInit();
    //  this is a convenient place to change fusion parameters
    imu->setGyroRunTimeCalibrationEnable(false);             // turn off gyro bias calibration at startup, allow system to equiblirate first
    imu->setSlerpPower(0.02);
    imu->setGyroEnable(true);
    imu->setAccelEnable(true);
    imu->setCompassEnable(false);
    imu->setDebugEnable(false); // turn on if you want to see Fusion information
        
    //  set up pressure sensor

    if (pressure != NULL)
        pressure->pressureInit();

    //  set up humidity sensor

    if (humidity != NULL)
        humidity->humidityInit();
    
    //  set up console io
    struct termios    ctty;
    tcgetattr(fileno(stdout), &ctty);
    ctty.c_lflag &= ~(ICANON);
    tcsetattr(fileno(stdout), TCSANOW, &ctty);

    // dry run of the system
    int i=0;
    while (i < 80) {
        if  (imu->IMURead()) { i++; }
    }        
    imu->setGyroRunTimeCalibrationEnable(true);     // enable background gyro calibration

    //  set up timers
    rateTimer = lastDisplayPoll = lastPoll = lastIMUPoll = lastHumidityPoll = lastPressurePoll = lastUserPoll = RTMath::currentUSecsSinceEpoch();
    timeout= 10*(imu->IMUGetPollInterval() * 1000);
    
    //  now just process data
    while (!mustExit) {
   
        //  poll at the rate recommended by the IMU
        now = RTMath::currentUSecsSinceEpoch();
        usleep((imu->IMUGetPollInterval() * 1000) - (now - lastPoll);
        lastPoll = now;

        // check IMU stalled
        if ( (now - lastIMUPoll) > timeout ) {
            // We have IMU stalled and need to reset it
            HAL_ERROR("!!!!!!!!!!!!!!!!!!!! IMU RESET !!!!!!!!!!!!!!!!!!!!\n");
            imu->IMUInit();
			lastPoll = RTMath::currentUSecsSinceEpoch();
        }
            
        while (imu->IMURead()) {
            // set loop time stamp
            now = lastIMUPoll = RTMath::currentUSecsSinceEpoch();

            imuData = imu->getIMUData();
            // check data in ragne
            if ( (imuData.gyro.length() > 35.0) || (imuData.accel.length() > 16.0) || (imuData.compass.length() > 1000.0) ) {
                // IMU Data Error
                HAL_ERROR("!!!!!!!!!!!!!!!!!!!! IMU RESET !!!!!!!!!!!!!!!!!!!!\n");
                imu->IMUInit();
				lastIMUPoll = RTMath::currentUSecsSinceEpoch();
				break;
            }
            
            //  add the pressure data to the structure
            if (pressure != NULL) {
              if ( (now - lastPressurePoll) >= 20000 ) { // 20ms
                lastPressurePoll = now;
                pressure->pressureRead(imuData);
              }
            }
            
            //  add the humidity data to the structure
            if (humidity != NULL) {
              if ( (now - lastHumidityPoll) >= 80000 ) { // 12.5Hz = 80ms
                lastHumidityPoll = now;
                humidity->humidityRead(imuData);
                humidity_avg = humidity->updateAverageHumidity(imuData.humidity); // smooth it out to approx. 10Hz update rate
              }
            }

            // Motion detection
            ismoving=motion->detectMotion(imuData.accel, imuData.gyro);
            
            // Residuals of Acceleration minus Gravity
            residuals = imu->getAccelResiduals();

            // Tilt Compensated Heading
            heading     = imuData.fusionPose.toHeading(imuData.compass, settings->m_compassAdjDeclination);
            heading_avg = motion->updateAverageHeading(heading); // smooth it out to approx. 10Hz update rate
            
            // Attempt velocity and position estimation
            motion->updateVelocityPosition(residuals, imuData.fusionQPose, 9.81f, imuData.timestamp, ismoving);
            // checking rotations: motion->updateVelocityPosition(imuData.accel, imuData.fusionQPose, 9.81f, imuData.timestamp, ismoving);
            MOTION_DATA motionData = motion->getMotionData();
                    
            // 
            sampleCount++;

            //  display 10 times per second
            if ((now - lastDisplayPoll) > 100000) {
                lastDisplayPoll = now;           
                printf("\e[1;1H\e[2J");  // clear screen and move cursor 1/1

                printf("RTIMU: Fusion %s, Compass is %s ", RTFusion::fusionName(settings->m_fusionType), enableCompass ? "On" : "Off" );
                printf("Sample Rate: %d\n", sampleRate);
                printf("%s, Heading: %6.1f Heading Ave: %6.1f\n", ismoving ? "IMU is moving" : "IMU is still ", RTMATH_RAD_TO_DEGREE * heading, RTMATH_RAD_TO_DEGREE * heading_avg);
                printf("%s", RTMath::display("Quaternion", imuData.fusionQPose));
                printf("%s", RTMath::displayDegrees("Pose ", imuData.fusionPose));
                printf("%s", RTMath::displayRadians("Accel", imuData.accel));
                printf("%s", RTMath::displayRadians("Gyro ", imuData.gyro));
                printf("%s", RTMath::displayRadians("Mag  ", imuData.compass));
                printf("%s", RTMath::displayRadians("Residuals     ", residuals));
                RTVector3 residualsBias = motion->getResidualsBias();
                printf("%s", RTMath::displayRadians("Residuals Bias", residualsBias));

                if (pressure != NULL) {
                    printf("Pressure: %4.1f, height above sea level: %4.1f, depth below sea level: %4.1f\n",
                           imuData.pressure, RTMath::convertPressureToHeight(imuData.pressure, staticPressure),
                                             RTMath::convertPressureToDepth(imuData.pressure, staticPressure));
                }
                if (humidity != NULL) {
                    printf("Humidity: %4.1f%% avg: %4.1f%%\n",
                           imuData.humidity, humidity_avg);
                }

                printf("Temperature: IMU %4.1f", imuData.IMUtemperature);
                if (pressure != NULL) { printf(", Pressure Sensor %4.1f", imuData.pressureTemperature); }
                if (humidity != NULL) { printf(", Humidity Sensor %4.1f", imuData.humidityTemperature); }
                printf("\n");

                printf("%s", RTMath::displayRadians("World Accel   ", motionData.worldAcceleration));
                printf("%s", RTMath::displayRadians("World Velocity", motionData.worldVelocity));
                printf("%s", RTMath::displayRadians("World Velocity Drift", motionData.worldVelocityDrift));
                printf("%s", RTMath::displayRadians("World Position", motionData.worldPosition));
                printf("%s", RTMath::displayRadians("Local Residuals", motionData.residuals));

                printf("Timestamp: %" PRIu64 "\n", imuData.timestamp);
                printf(" a-p-z-m-M-x----------- \n");
                printf("%s", keystatus);
                printf("%s", sysstatus1);
                printf("%s", sysstatus2);

                printf("%s", "a: runtm Acc cal, A: disp max/min, p: zero stat press, z: zero\n");
                printf("%s", "m/M: Mag off/on, g/G: Gyro runtm cal off/on \n");
                printf("%s", "d/D: Gyro manual bias off/on, x: exit\n");

                fflush(stdout);
            }

            //  update rate every second

            if ((now - rateTimer) > 1000000) {
                sampleRate = sampleCount;
                sampleCount = 0;
                rateTimer = now;
            }
            
        } // end check for new IMU data
        
        if ( (now - lastUserPoll) > 500000 ) { // 20Hz
            lastUserPoll = now;

            if ((input = getUserChar()) != 0) {
                switch (input) {
                    case 'a' :
                        // conduct Accelerometer Max/Min calibration
                        keystatus[1] ='A';
                        keystatus[3] ='-';
                        keystatus[5] ='-';
                        imu->runtimeAdjustAccelCal();
                        break;
                    case 'A' :
                        keystatus[1] ='-';
                        sprintf(sysstatus1, "%s", RTMath::displayRadians("Acc Cal Max ", settings->m_accelCalMax));
                        sprintf(sysstatus2, "%s", RTMath::displayRadians("Acc Cal Min ", settings->m_accelCalMin));
                        break;
                    case 'p' :
                        keystatus[1] ='-';
                        keystatus[3] ='.';
                        keystatus[5] ='-';
                        staticPressure = imuData.pressure;
                        break;
                    case 'z' :
                        // zero motion & position
                        keystatus[1] ='-';
                        keystatus[3] ='-';
                        keystatus[5] ='.';
                        strcpy(keystatus, " ----.----------------- \n");
                        motion->motionReset();
                        break;
                    case 'm' :
                        // magnetometer OFF
                        keystatus[7] ='m';
                        keystatus[9] ='m';
                        enableCompass = false;
                        imu->setCompassEnable(enableCompass);
                        break;
                    case 'M' :
                        // magnetometer ON
                        keystatus[7] ='M';
                        keystatus[9] ='M';
                        enableCompass = true;
                        imu->setCompassEnable(enableCompass);
                        break;
                    case 'g' :
                        // Gyro Bias runtime OFF
                        keystatus[9] ='g';
                        imu->setGyroRunTimeCalibrationEnable(false);
                        break;
                    case 'G' :
                        // runtime Gyro Bias ON
                        keystatus[9] ='G';
                        imu->setGyroRunTimeCalibrationEnable(true);
                        break;
                    case 'd' :
                        // Gyro Bias manual OFF
                        keystatus[9] ='d';
                        imu->setGyroManualCalibrationEnable(false);
                        break;
                    case 'D' :
                        // manual Gyro Bias ON
                        imu->setGyroRunTimeCalibrationEnable(false);
                        keystatus[9] ='D';
                        imu->setGyroManualCalibrationEnable(true);
                        break;
                    case 'x' :
                        // must exit
                        keystatus[11] ='X';
                        mustExit = true;
                        break;
                    } // end switch input
            } // end if user pressed key
        } // user poll
    } // while
    printf("\nRTIMULibDrive11 exiting\n");
    settings->saveSettings(); // should update gyro bias
    return 0;
}

char getUserChar()
{
    int i;

    ioctl(0, FIONREAD, &i);
    if (i <= 0)
        return 0;
    // return tolower(getchar());
    return getchar();
}